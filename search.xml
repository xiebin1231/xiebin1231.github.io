<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇文章</title>
    <url>/2022/11/20/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h2>]]></content>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2022/11/20/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h2>]]></content>
  </entry>
  <entry>
    <title>Redis相关面试题</title>
    <url>/2022/11/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="1、什么是redis"><a href="#1、什么是redis" class="headerlink" title="1、什么是redis"></a>1、什么是redis</h3><p>redis是一个完全开源免费的，一个高性能的<strong>key-value</strong>数据库.</p>
<p>redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时候可以再次加载使用。</p>
<p>redis的速度快，因为redis的数据都是存在内存中，查找和操作的时间的复杂度都是<code>O（1）</code>。</p>
<p>支持丰富的数据类型，支持 string，list，set，Zset，hash 等。</p>
<p>支持事务，操作都是有原子性的，对数据的更改要么全部执行，要么全部不执行。</p>
<p>当redis用于缓存的时候，可以合理的设置<code>key</code>的过期时间，过期后会自动删除，避免数据的冗余。</p>
<h3 id="2、redis的数据类型"><a href="#2、redis的数据类型" class="headerlink" title="2、redis的数据类型"></a>2、redis的数据类型</h3><p>redis支持五种数据类型：String(字符串)，hash(哈希)，list(列表)，set(集合)，zset(有序集合)。</p>
<p>在项目中比较常用的是 <code>String</code>, <code>hash</code>。</p>
<h3 id="3、redis的持久化机制。"><a href="#3、redis的持久化机制。" class="headerlink" title="3、redis的持久化机制。"></a>3、redis的持久化机制。</h3><p>redis支持两种持久化机制<code>RDB</code>和<code>AOF</code>:</p>
<h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>用数据快照的方式半持久化，记录redis数据库某一时刻的全部的<code>key</code>和<code>value</code>写入一个临时的文件，持久化 结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>只有一个<code>dump.rdb</code>文件，方便持久化</li>
<li>容灾性好，一个文件可以保存到安全的磁盘。</li>
<li>性能最大化，<code>fork</code>子进程完成写的操作，让主线程继续处理命令，使得IO最大化，保证了redis的高性能。</li>
<li>相对数据大时候，比AOF的启动要快速。</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>数据安全性低，RDB是隔一段时间进行的持久化，万一这段时间内redis发生故障，就会造成数据丢失的问题。</p>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>redis将所有的命令行记录以redis命令，写入一个aof文件。</p>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul>
<li>数据安全，aof 持久化可以配置 <code>appendfsync</code> 属性，有 <code>always</code>，每进行一次 命令操作就记录到 aof 文件中一次。</li>
<li>通过append模式写文件，即使中途服务器发送故障宕机，可以通过<code>redis-check-aof</code>工具解决数据一致性的问题。</li>
<li>aof机制的<code>rewrite</code>模式，aof文件没有被<code>rewrite</code>之间，可以删除其中，某些没用的命令（flush all）</li>
</ul>
<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li><p>aof文件比rdb文件大，并且恢复速度慢</p>
</li>
<li><p>当数据集较大时，比rdb启动效率要低</p>
</li>
</ul>
<h3 id="4、redis常见的性能优化问题"><a href="#4、redis常见的性能优化问题" class="headerlink" title="4、redis常见的性能优化问题"></a>4、redis常见的性能优化问题</h3><ul>
<li>Master节点最好不要写内存的快照，如果使用master写内存快照，<code>save</code>命令调度<code>rdbServer</code>函数，会阻塞主线程的工作，当快照较大时候，会使得主线程间断性的暂停服务。</li>
<li>为了主从复制的速度以及连接的稳定性，主从节点最好存在于同一个局域网，避免网络的问题导致性能不佳。</li>
<li>主从结构不要使用网状结构，使用单向链表更为稳定，<code>Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…</code>这样的结构方便解决单点故障问题，实现<code>slave</code>对<code>master</code>的替换。如果master挂了，可以立刻启动slave作为master。</li>
</ul>
<h3 id="5、redis过期键的删除策略"><a href="#5、redis过期键的删除策略" class="headerlink" title="5、redis过期键的删除策略"></a>5、redis过期键的删除策略</h3><ol>
<li>定时删除：在设置键的过期时间的同时，创建一个定时器<code>timer</code>,让定时器在键过期时间来临的时候，立刻对键进行删除操作。</li>
<li>惰性删除：放任键的过期时间不管，每次获取键的时候，都检查键的过期时间，如果过期的话，就删除改建，没有过期就返回该建。</li>
<li>定期删除：每隔一段时间程序就对数据库进行一次检查操作，删除里面过期的键。</li>
</ol>
<h3 id="6、redis同步机制"><a href="#6、redis同步机制" class="headerlink" title="6、redis同步机制"></a>6、redis同步机制</h3><p>redis可以使用<code>主从同步</code>、<code>从从同步</code>。做第一次同步时候，主节点做一次<code>bgsave</code>,并同时将后续的修改操作记录到<code>内存 buffer</code>中，完成后将rdb文件全部同步复制</p>
<p>到从节点，复制节点接收完成后将rdb镜像加载到内存中。加载完成后通知主节点将期间的修改的操作记录同步复制到从节点进行重放就完成了同步过程。</p>
<h3 id="7、redis集群"><a href="#7、redis集群" class="headerlink" title="7、redis集群"></a>7、redis集群</h3><p><code>Redis Sentinal（哨兵模式）</code> 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。</p>
<p><code>Redis Cluster（普通模式）</code> 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行 分片存储。</p>
<h3 id="8、redis哈希槽"><a href="#8、redis哈希槽" class="headerlink" title="8、redis哈希槽"></a>8、redis哈希槽</h3><p>redis集群没用一致性的使用hash，而是加入的哈希槽的概念，redis集群有<code>16384</code>个哈希槽，每一个<code>key</code>通过<code>CRC16</code>校验后对16384取模赖决定这个key放在哪个槽，集群的每一个节点负责一部分hash槽。</p>
<h3 id="9、redis事务"><a href="#9、redis事务" class="headerlink" title="9、redis事务"></a>9、redis事务</h3><p>redis事务是一个单独隔离的操作:事务中的所有命令都会被序列化、按顺序的执行。事务在执行的过程中，不会被其他客户端发送来的命令打断。</p>
<p>事务是一个原子操作：要么都成功，要么都失败。</p>
<h3 id="10、redis内存优化"><a href="#10、redis内存优化" class="headerlink" title="10、redis内存优化"></a>10、redis内存优化</h3><p>redis尽可能的使用散列表(<code>hash</code>),散列表使用的内存非常小，尽可能的将数据模型抽象到一个散列表里面。</p>
<h3 id="11、redis缓存穿透问题"><a href="#11、redis缓存穿透问题" class="headerlink" title="11、redis缓存穿透问题"></a>11、redis缓存穿透问题</h3><p><strong>问题描述</strong>：redis中对应的key的数据在数据源中不存在，每次针对此key的请求都从缓存中获取不到，请求都会到数据库，从而可能压垮数据库，比如用一个不存在的用户的id获取用户的信息，不论从数据库还是缓存都没有，若有人利用次漏洞进行攻击可能压垮数据库。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li><code>对空值进行缓存</code>：如果一个查询返回为空的数据(不管数据是否不存在)，我继续把这个空结果进行缓存，设置空结果的过期时间会很短，最长时候不超过五分钟。</li>
<li><code>设置可访问的白名单</code>：使用<code>bitmaps</code>类型定义一个可以访问的名单，名单<code>id</code>作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不<code>bitmaps</code>里面，进行拦截，不允许访问。</li>
<li><code>采用布隆过滤器(·Bloom Filter)</code>：布隆过滤器可以用于检索一个元素是否存在一个集合中，它的优点是空间效率和查询时间都原因超出一般的算法，缺点是有一定的误识别率和删除困难那，将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</li>
<li><code>进行实时监控</code>：当发现redis的命中率快速降低，需要排查访问对象和访问的数据，和运维人员配合，设置黑名单限制服务。</li>
</ul>
<h3 id="12、redis缓存击穿问题"><a href="#12、redis缓存击穿问题" class="headerlink" title="12、redis缓存击穿问题"></a>12、redis缓存击穿问题</h3><p><strong>问题描述</strong>：key对应的数据存在，但在redis中过期，这些请求发现缓存过期一般都会从后端的数据库加载数据并返回设置到缓存中，这时候大量并发请求肯会把数据库瞬间压垮。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li><p><code>预先设置热门数据</code>：在redis访问高峰之前，把一些热门的数据提前缓存到<code>redis</code>中，加大这些热门数据<code>key</code>的时常。</p>
</li>
<li><p><code>实时调整</code>：现场实时监控哪些数据是热门数据，实时调整<code>key</code>的过期时间。</p>
</li>
<li><p><code>使用锁</code>：</p>
<ol>
<li><p>在缓存失效的时候，不去立即<code>load db</code>。</p>
</li>
<li><p>先使用缓存工具的某些带返回值的操作（比如redis的setnx）去set一个<code>mutex key</code>。</p>
</li>
<li><p>当操作返回成功时候，在进行<code>load db</code>操作，并返回缓存，最后删除<code>mutex key</code>。</p>
</li>
<li><p>当操作返回失败的时候，证明有线程在<code>load db</code>,当前线程睡眠一段时候在重试整个get缓存的方法.</p>
</li>
</ol>
</li>
</ul>
<h3 id="13、redis缓存雪崩问题"><a href="#13、redis缓存雪崩问题" class="headerlink" title="13、redis缓存雪崩问题"></a>13、redis缓存雪崩问题</h3><p><strong>问题描述</strong>：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
<p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key正常访问。</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li><code>使用多级缓存架构</code>：nginx缓存 + redis缓存 +其他缓存（ehcache等）。</li>
<li><code>使用锁或者队列</code>：用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况。</li>
<li><code>设置过期标志更新缓存</code>：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</li>
<li><code>将缓存失效时间分散开</code>：比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li>
</ul>
<h3 id="14、redis淘汰策略"><a href="#14、redis淘汰策略" class="headerlink" title="14、redis淘汰策略"></a>14、redis淘汰策略</h3><p><code>volatile-lru</code>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最近最少时间的数据进行淘汰。</p>
<p><code>volatile-ttl</code>：从已设置过期时间的数据集，挑选将要过期的数据淘汰。</p>
<p><code>volatile-random</code>：从已设置过期时间的数据集，随机挑选数据进行淘汰。</p>
<p><code>allkeys-lru</code>：从数据集（<code>server.db[i].dict</code>）挑选最少使用的进行淘汰。</p>
<p><code>allkeys-random</code>：从数据集（server.db[i].dict）中任意选择数据淘汰。</p>
<p><code>no-enviction（驱逐）</code>：禁止驱逐数据。</p>
<h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ul>
<li>如果数据呈现幂规律分步，也就是一部分访问频率高，一部分低，则使用<code>allkeys-lru</code></li>
<li>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 <code>allkeys-random</code></li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/custom.css</url>
    <content><![CDATA[/* 页脚与头图透明 */
#footer {
    background: transparent !important;
}
#page-header {
    background: transparent !important;
}

/* 白天模式遮罩透明 */
#footer::before {
    background: transparent !important;
}
#page-header {
    background: transparent !important;
}

/* 夜间模式遮罩透明 */
[data-theme="dark"] #footer::before {
    background: transparent !important;
}
[data-theme="dark"] #page-header::before {
    background: transparent !important;
}

/* 一级菜单居中 */
#nav .menus_items {
    position: absolute !important;
    width: fit-content !important;
    left: 50% !important;
    transform: translateX(-50%) !important;
}
/* 子菜单横向展示 */
#nav .menus_items .menus_item:hover .menus_item_child {
    display: flex !important;
}
/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */
.menus_items .menus_item:nth-child(5) .menus_item_child {
    left: -125px;
}
/* 夜间模式菜单栏发光字 */
[data-theme="dark"] #nav .site-page,
[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {
    text-shadow: 0 0 2px rgb(179, 71, 241) !important;
}

/* 手机端适配 */
[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {
    text-shadow: 0 0 2px rgb(179, 71, 241) !important;
}

/* 侧边栏个人信息卡片动态渐变色 */
#aside-content > .card-widget.card-info {
    background: linear-gradient(
            -45deg,
            #e8d8b9,
            #eccec5,
            #a3e9eb,
            #bdbdf0,
            #eec1ea
    );
    box-shadow: 0 0 5px rgb(66, 68, 68);
    position: relative;
    background-size: 400% 400%;
    -webkit-animation: Gradient 10s ease infinite;
    -moz-animation: Gradient 10s ease infinite;
    animation: Gradient 10s ease infinite !important;
}
@-webkit-keyframes Gradient {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}
@-moz-keyframes Gradient {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}
@keyframes Gradient {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

/* 黑夜模式适配 */
[data-theme="dark"] #aside-content > .card-widget.card-info {
    background: #191919ee;
}

/* 个人信息Follow me按钮 */
#aside-content > .card-widget.card-info > #card-info-btn {
    background-color: #3eb8be;
    border-radius: 8px;
}

.pace {
    -webkit-pointer-events: none;
    pointer-events: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    z-index: 2000;
    position: fixed;
    margin: auto;
    top: 4px;
    left: 0;
    right: 0;
    height: 8px;
    border-radius: 8px;
    width: 7rem;
    background: #eaecf2;
    border: 1px #e3e8f7;
    overflow: hidden
}

.pace-inactive .pace-progress {
    opacity: 0;
    transition: .3s ease-in
}

.pace .pace-progress {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    max-width: 200px;
    position: absolute;
    z-index: 2000;
    display: block;
    top: 0;
    right: 100%;
    height: 100%;
    width: 100%;
    /* linear-gradient(to right, #3494e6, #ec6ead) */
    background: linear-gradient(to right, #43cea2, #3866ca);
    animation: gradient 2s ease infinite;
    background-size: 200%
}

.pace.pace-inactive {
    opacity: 0;
    transition: .3s;
    top: -8px
}


#cursor {
    position: fixed;
    width: 16px;
    height: 16px;
    background: rgb(24, 152, 176);
    color: rgb(20, 205, 240);
    border-radius: 8px;
    opacity: 0.25;
    z-index: 10086;
    pointer-events: none;
    transition: 0.2s ease-in-out;
    transition-property: background, opacity, transform;
}

#cursor.hidden {
    opacity: 0;
}

#cursor.hover {
    opacity: 0.1;
    transform: scale(2.5);
}

#cursor.active {
    opacity: 0.5;
    transform: scale(0.5);
}

@font-face {
    /* 为载入的字体取名字(随意) */
    font-family: 'YSHST';
    /* 字体文件地址(相对或者绝对路径都可以) */
    src: url(/font/tt2.ttf);
    /* 定义加粗样式(加粗多少) */
    font-weight: 400;
    /* 定义字体样式(斜体/非斜体) */
    font-style: normal;
    /* 定义显示样式 */
    font-display: block;
}

.pace {
    -webkit-pointer-events: none;
    pointer-events: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    z-index: 2000;
    position: fixed;
    margin: auto;
    top: 10px;
    left: 0;
    right: 0;
    height: 8px;
    border-radius: 8px;
    width: 4rem;
    background: #eaecf2;
    border: 1px #e3e8f7;
    overflow: hidden
}

.pace-inactive .pace-progress {
    opacity: 0;
    transition: .3s ease-in
}

.pace .pace-progress {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    max-width: 200px;
    position: absolute;
    z-index: 2000;
    display: block;
    top: 0;
    right: 100%;
    height: 100%;
    width: 100%;
    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
    animation: gradient 1.5s ease infinite;
    background-size: 200%
}

.pace.pace-inactive {
    opacity: 0;
    transition: .3s;
    top: -8px
}

@keyframes gradient {
    0% {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 0% 50%;
    }
}

.loading-img {
    background: url(https://s3.uuu.ovh/imgs/2022/11/21/9ac9b51c41efd413.png) no-repeat center center;
    background-size: cover;
}

/* 主题宽度 */
.layout#content-inner  {
    max-width: 1300px;
}

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/universe.css</url>
    <content><![CDATA[/* 背景宇宙星光  */
#universe{
    display: block;
    position: fixed;
    margin: 0;
    padding: 0;
    border: 0;
    outline: 0;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */
    z-index: -1;
}]]></content>
  </entry>
  <entry>
    <title>link</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/light.js</url>
    <content><![CDATA[// 霓虹灯效果
// 颜色数组
var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];
// 颜色索引
var idx = 0;

// 切换颜色
function changeColor() {
    // 仅夜间模式才启用
    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {
        if (document.getElementById("site-name"))
            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";
        if (document.getElementById("site-title"))
            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";
        if (document.getElementById("site-subtitle"))
            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";
        if (document.getElementById("post-info"))
            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";
        try {
            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";
            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";
        } catch {

        }
        idx++;
        if (idx == 8) {
            idx = 0;
        }
    } else {
        // 白天模式恢复默认
        if (document.getElementById("site-name"))
            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";
        if (document.getElementById("site-title"))
            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";
        if (document.getElementById("site-subtitle"))
            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";
        if (document.getElementById("post-info"))
            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";
        try {
            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";
            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";
        } catch {

        }
    }
}

// 开启计时器
window.onload = setInterval(changeColor, 1200);]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/mouse.js</url>
    <content><![CDATA[var CURSOR;

Math.lerp = (a, b, n) => (1 - n) * a + n * b;

const getStyle = (el, attr) => {
    try {
        return window.getComputedStyle
            ? window.getComputedStyle(el)[attr]
            : el.currentStyle[attr];
    } catch (e) {}
    return "";
};

class Cursor {
    constructor() {
        this.pos = {curr: null, prev: null};
        this.pt = [];
        this.create();
        this.init();
        this.render();
    }

    move(left, top) {
        this.cursor.style["left"] = `${left}px`;
        this.cursor.style["top"] = `${top}px`;
    }

    create() {
        if (!this.cursor) {
            this.cursor = document.createElement("div");
            this.cursor.id = "cursor";
            this.cursor.classList.add("hidden");
            document.body.append(this.cursor);
        }

        var el = document.getElementsByTagName('*');
        for (let i = 0; i < el.length; i++)
            if (getStyle(el[i], "cursor") == "pointer")
                this.pt.push(el[i].outerHTML);

        document.body.appendChild((this.scr = document.createElement("style")));
        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5'/></svg>") 4 4, auto}`;
    }

    refresh() {
        this.scr.remove();
        this.cursor.classList.remove("hover");
        this.cursor.classList.remove("active");
        this.pos = {curr: null, prev: null};
        this.pt = [];

        this.create();
        this.init();
        this.render();
    }

    init() {
        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");
        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");
        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};
        document.onmouseenter = e => this.cursor.classList.remove("hidden");
        document.onmouseleave = e => this.cursor.classList.add("hidden");
        document.onmousedown  = e => this.cursor.classList.add("active");
        document.onmouseup    = e => this.cursor.classList.remove("active");
    }

    render() {
        if (this.pos.prev) {
            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);
            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);
            this.move(this.pos.prev.x, this.pos.prev.y);
        } else {
            this.pos.prev = this.pos.curr;
        }
        requestAnimationFrame(() => this.render());
    }
}

(() => {
    CURSOR = new Cursor();
    // 需要重新获取列表时，使用 CURSOR.refresh()
})();
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/title.js</url>
    <content><![CDATA[var titleTime,OriginTitile=document.title;document.addEventListener("visibilitychange",(function(){document.hidden?(document.title="👀人呢，赶紧回来！~",clearTimeout(titleTime)):(document.title="🐖回来了？这个家没有你的位置了！~～",titleTime=setTimeout((function(){document.title=OriginTitile}),2e3))}));]]></content>
  </entry>
  <entry>
    <title>电影</title>
    <url>/movie/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/universe.js</url>
    <content><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};
dark()]]></content>
  </entry>
  <entry>
    <title>音乐</title>
    <url>/music/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
